{"version":3,"sources":["firebase.ts","AddUserModal.tsx","confirmAction.ts","UserRow/Time.tsx","UserRow/UserRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["windowRef","window","firebaseInitialized","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","usersRef","database","ref","update","userIds","updates","reduce","totalUpdates","userId","Object","entries","updater","key","newValue","location","href","match","set","isResolved","usersCache","resolvedPromise","Promise","done","once","snapShot","val","then","useUsers","useReducer","x","forceUpdate","usersMap","useEffect","callback","nextUsers","on","off","users","map","id","user","addUser","userName","trimmedUserName","trim","values","find","name","push","timerStart","timeTotal","startUserTimer","Date","now","stopUserTimer","currentUser","resetUserTimers","keys","clearUsers","AddUserModal","action","closeModal","useState","setUserName","className","onClick","value","onChange","e","target","placeholder","undefined","disabled","confirm","paddedNumber","number","spaces","strNumber","String","Math","floor","zeros","length","repeat","Time","time","minutes","seconds","millis","UserRow","totalTimer","startTimer","stopTimer","console","log","interval","setInterval","clearInterval","App","userList","addUserShowing","setAddUserShowing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","type","color","height","width","StrictMode","document","getElementById"],"mappings":"qQAYMA,G,MAAYC,QACbD,EAAUE,sBACXC,IAASC,cAXQ,CACjBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKPX,EAAUE,qBAAsB,GAI7B,IAEMU,EAFWT,IAASU,WAEAC,IAAI,SAoBrC,SAASC,EAAOC,EAAmBC,GAC/B,OAAOL,EAASG,OACZC,EAAQE,QACJ,SAACC,EAAcC,GAAf,mBAAC,eACMD,GACAE,OAAOC,QAAQL,GAASC,QACvB,SAACK,EAAD,0BAAWC,EAAX,KAAgBC,EAAhB,wBAAC,eACMF,GADP,4BAEQH,EAFR,YAEkBI,GAAQC,MAE1B,OAGR,KA/BRC,SAASC,KAAKC,MAAM,UACpBhB,EAASiB,IAAI,MAkCjB,IAAIC,GAAa,EACbC,EAAmC,GAEjCC,EAAkB,IAAIC,SAAc,SAACC,GACvCtB,EAASuB,KAAK,SAAS,SAACC,GACpBL,EAAaK,EAASC,MACtBH,UAELI,MAAK,WACJR,GAAa,KAGJS,EAAW,WAA8B,IAAD,EACzBC,sBAAW,SAACC,GAAD,OAAQA,EAAI,GAAK,KAAI,GAA/CC,EADwC,oBAE1CC,EACHZ,EAOJa,qBAAU,WACN,IAAMC,EAAW,SAACT,GAPlB,IAACU,IAQYV,EAASC,OAAS,GAP3BN,EAAae,EACbJ,KAUJ,OAFA9B,EAASmC,GAAG,QAASF,GAEd,kBAAMjC,EAASoC,IAAI,QAASH,MAEpC,IAEH,IAwCMI,EAAQ5B,OAAOC,QAAQqB,GAAUO,KAAI,mCAAEC,EAAF,KAAMC,EAAN,wBAAC,eACrCA,GADoC,IAEvCD,UAGJ,IAAKrB,EACD,MAAME,EAGV,MAAO,CACHiB,EACA,CAAEI,QAnDU,SAACC,GACb,IAAMC,EAAkBD,EAASE,OAE7BnC,OAAOoC,OAAOd,GAAUe,MACpB,SAACN,GAAD,OAAUA,EAAKO,OAASJ,MAKhC3C,EAASgD,KAAK,CACVD,KAAMJ,EACNM,WAAY,KACZC,UAAW,KAuCJC,eAnCQ,SAAC3C,GACpBL,EAAO,CAACK,GAAS,CACbyC,WAAYG,KAAKC,SAiCMC,cA1BT,SAAC9C,GACnB,IAAM+C,EAAcxB,EAASvB,GAC7BL,EAAO,CAACK,GAAS,CACbyC,WAAY,KACZC,UACIK,EAAYL,WAAaE,KAAKC,MAAQE,EAAYN,eAqBhBO,gBAjBtB,WACpBrD,EAAOM,OAAOgD,KAAK1B,GAAW,CAC1BkB,WAAY,KACZC,UAAW,KAc4CQ,WA7B5C,WACf1D,EAASiB,IAAI,UC7Gd,SAAS0C,EAAT,GAAmE,ICJ5CC,EDICC,EAA0C,EAA1CA,WAA0C,EACrCC,mBAAiB,IADoB,mBAC9DpB,EAD8D,KACpDqB,EADoD,OAEhBpC,IAFgB,sBAE1Dc,EAF0D,EAE1DA,QAASe,EAFiD,EAEjDA,gBAAiBE,EAFgC,EAEhCA,WACrC,OACI,sBAAKM,UAAU,eAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,aACf,qBAAKA,UAAU,cAAcC,QAASJ,EAAtC,kBAIJ,sBAAKG,UAAU,cAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,uBACIA,UAAU,eACVE,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOL,EAAYK,EAAEC,OAAOH,QACtCI,YAAY,cAEhB,uBACA,wBACIL,QACIvB,EACM,WACID,EAAQC,GACRmB,UAEJU,EAEVC,UAAW9B,EATf,yBAcJ,qBAAKsB,UAAU,iBAAf,SACI,wBACIC,QAAS,WACLT,IACAK,KAHR,4BASJ,qBAAKG,UAAU,iBAAf,SACI,wBACIC,SClDML,EDkDiB,WACnBF,IACAG,KCnDjB,WAECY,QAAQ,8CACRb,MD6CQ,qC,ME/CpB,SAASc,EAAaC,GAA6B,IAAbC,EAAY,uDAAH,EACrCC,EAAYC,OAAOC,KAAKC,MAAML,IAC9BM,EAAQL,EAASC,EAAUK,OACjC,MAAO,IAAIC,OAAOF,GAAS,EAAIA,EAAQ,GAAKJ,EAGzC,SAASO,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,KACbC,EAAUZ,EAAaW,EAAI,KAC3BE,EAAUb,EAAcW,EAAO,IAAQ,IACvCG,EAASd,EAAaW,EAAO,KAEnC,OAAO,6CAAMC,EAAN,YAAiBC,EAAjB,YAA4BC,KCVhC,SAASC,EAAT,GAYH,IAXA/C,EAWD,EAXCA,SACAO,EAUD,EAVCA,WACAyC,EASD,EATCA,WACAC,EAQD,EARCA,WACAC,EAOD,EAPCA,UAOD,EACyBhE,sBAAW,SAACC,GAAD,OAAQA,EAAI,GAAK,KAAI,GAA/CC,EADV,oBAWC,OARAE,qBAAU,WACN,GAAIiB,EAAY,CACZ4C,QAAQC,IAAI,UACZ,IAAMC,EAAWC,aAAY,kBAAMlE,MAAe,KAClD,OAAO,kBAAMmE,cAAcF,OAEhC,CAAC9C,IAGA,sBAAKe,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SAA2BtB,IAC3B,qBAAKsB,UAAU,QAAf,SACKf,EACG,cAACmC,EAAD,CAAMC,KAAMK,GAActC,KAAKC,MAAQJ,KAEvC,cAACmC,EAAD,CAAMC,KAAMK,MAGpB,qBAAK1B,UAAU,UAAf,SACKf,EACG,wBACIe,UAAU,0BACVC,QAAS,WACL2B,KAHR,kBASA,wBACI5B,UAAU,2BACVC,QAAS,WACL0B,KAHR,wBCZLO,MA5Bf,WAAgB,IAAD,EAC2CvE,IAD3C,mBACJwE,EADI,YACQhD,EADR,EACQA,eAAgBG,EADxB,EACwBA,cADxB,EAEiCQ,oBAAS,GAF1C,mBAEJsC,EAFI,KAEYC,EAFZ,KAGX,OACI,sBAAKrC,UAAU,MAAf,UACKoC,GACG,cAACzC,EAAD,CAAcE,WAAY,kBAAMwC,GAAkB,MAErDF,EAAS7D,KAAI,gBAASI,EAAT,EAAGK,KAAgBG,EAAnB,EAAmBA,UAAWD,EAA9B,EAA8BA,WAAYV,EAA1C,EAA0CA,GAA1C,OACV,cAACkD,EAAD,CAEI/C,SAAUA,EACVO,WAAYA,EACZyC,WAAYxC,EACZyC,WAAY,kBAAMxC,EAAeZ,IACjCqD,UAAW,kBAAMtC,EAAcf,KAL1BG,MAQb,wBACIsB,UAAU,gBACVC,QAAS,kBAAMoC,GAAkB,IAFrC,wBCTGC,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqB9E,MACjB,YAAkD,IAA/C+E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHxBO,IAASC,OACL,cAAC,WAAD,CACIC,SACI,qBAAKhD,UAAU,SAAf,SACI,cAAC,IAAD,CACIiD,KAAK,eACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,OAPvB,SAYI,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5BjB,M","file":"static/js/main.58d15f84.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\nimport { useEffect, useReducer } from 'react';\nvar firebaseConfig = {\n    apiKey: 'AIzaSyCwXyge90tOlHAdTeZpsfDnuU-zgeANVgg',\n    authDomain: 'timer-app-8b2ae.firebaseapp.com',\n    databaseURL: 'https://timer-app-8b2ae-default-rtdb.firebaseio.com',\n    projectId: 'timer-app-8b2ae',\n    storageBucket: 'timer-app-8b2ae.appspot.com',\n    messagingSenderId: '236519982495',\n    appId: '1:236519982495:web:5789f2fb6a9a3f1d1029aa',\n};\nconst windowRef = window as any;\nif (!windowRef.firebaseInitialized) {\n    firebase.initializeApp(firebaseConfig);\n    windowRef.firebaseInitialized = true;\n}\n\n// Get a reference to the database service\nexport const database = firebase.database();\n\nexport const usersRef = database.ref('users');\n// eslint-disable-next-line no-restricted-globals\nif (location.href.match('clear')) {\n    usersRef.set(null);\n}\n\ntype User = {\n    name: string;\n    id: string;\n    timerStart: number | null;\n    timeTotal: number;\n};\n\ntype UserActions = {\n    addUser(userName: string): void;\n    startUserTimer(userId: string): void;\n    stopUserTimer(userId: string): void;\n    resetUserTimers(): void;\n    clearUsers(): void;\n};\nfunction update(userIds: string[], updates: Partial<Omit<User, 'id'>>) {\n    return usersRef.update(\n        userIds.reduce(\n            (totalUpdates, userId) => ({\n                ...totalUpdates,\n                ...Object.entries(updates).reduce(\n                    (updater, [key, newValue]) => ({\n                        ...updater,\n                        [`${userId}/${key}`]: newValue,\n                    }),\n                    {}\n                ),\n            }),\n            {}\n        )\n    );\n}\nlet isResolved = false;\nlet usersCache: Record<string, User> = {};\n\nconst resolvedPromise = new Promise<void>((done) => {\n    usersRef.once('value', (snapShot) => {\n        usersCache = snapShot.val();\n        done();\n    });\n}).then(() => {\n    isResolved = true;\n});\n\nexport const useUsers = (): [User[], UserActions] => {\n    const [, forceUpdate] = useReducer((x) => (x + 1) % 50, 0);\n    const [usersMap, setUsers] = [\n        usersCache,\n        (nextUsers: Record<string, User>) => {\n            usersCache = nextUsers;\n            forceUpdate();\n        },\n    ];\n\n    useEffect(() => {\n        const callback = (snapShot: firebase.database.DataSnapshot) => {\n            setUsers(snapShot.val() || {});\n        };\n        usersRef.on('value', callback);\n\n        return () => usersRef.off('value', callback);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const addUser = (userName: string): void => {\n        const trimmedUserName = userName.trim();\n        if (\n            Object.values(usersMap).find(\n                (user) => user.name === trimmedUserName\n            )\n        ) {\n            return;\n        }\n        usersRef.push({\n            name: trimmedUserName,\n            timerStart: null,\n            timeTotal: 0,\n        });\n    };\n\n    const startUserTimer = (userId: string) => {\n        update([userId], {\n            timerStart: Date.now(),\n        });\n    };\n\n    const clearUsers = () => {\n        usersRef.set(null);\n    };\n    const stopUserTimer = (userId: string) => {\n        const currentUser = usersMap[userId];\n        update([userId], {\n            timerStart: null,\n            timeTotal:\n                currentUser.timeTotal + (Date.now() - currentUser.timerStart!),\n        });\n    };\n\n    const resetUserTimers = () => {\n        update(Object.keys(usersMap), {\n            timerStart: null,\n            timeTotal: 0,\n        });\n    };\n    const users = Object.entries(usersMap).map(([id, user]) => ({\n        ...user,\n        id,\n    }));\n\n    if (!isResolved) {\n        throw resolvedPromise;\n    }\n\n    return [\n        users,\n        { addUser, startUserTimer, stopUserTimer, resetUserTimers, clearUsers },\n    ];\n};\n","import React, { useState } from 'react';\nimport { confirmAction } from './confirmAction';\nimport { useUsers } from './firebase';\n\nexport function AddUserModal({ closeModal }: { closeModal: () => void }) {\n    const [userName, setUserName] = useState<string>('');\n    const [, { addUser, resetUserTimers, clearUsers }] = useUsers();\n    return (\n        <div className='addUserModal'>\n            <div className='flexBox'>\n                <div className='flexItem'></div>\n                <div className='closeButton' onClick={closeModal}>\n                    X\n                </div>\n            </div>\n            <div className='optionsMenu'>\n                <div className='manageModalRow'>\n                    <input\n                        className='newUserInput'\n                        value={userName}\n                        onChange={(e) => setUserName(e.target.value)}\n                        placeholder='User name'\n                    ></input>\n                    <br />\n                    <button\n                        onClick={\n                            userName\n                                ? () => {\n                                      addUser(userName);\n                                      closeModal();\n                                  }\n                                : undefined\n                        }\n                        disabled={!userName}\n                    >\n                        Add user\n                    </button>\n                </div>\n                <div className='manageModalRow'>\n                    <button\n                        onClick={() => {\n                            resetUserTimers();\n                            closeModal();\n                        }}\n                    >\n                        Reset Timers\n                    </button>\n                </div>\n                <div className='manageModalRow'>\n                    <button\n                        onClick={confirmAction(() => {\n                            clearUsers();\n                            closeModal();\n                        })}\n                    >\n                        Clear all users\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","export function confirmAction(action: () => void): () => void {\n    return () => {\n        // eslint-disable-next-line no-restricted-globals\n        if (confirm('Are you sure you want to clear all users?')) {\n            action();\n        }\n    };\n}\n","import React from 'react';\n\nfunction paddedNumber(number: number, spaces = 2) {\n    const strNumber = String(Math.floor(number));\n    const zeros = spaces - strNumber.length;\n    return '0'.repeat(zeros >= 0 ? zeros : 0) + strNumber;\n}\n\nexport function Time({ time }: { time: number }) {\n    const minutes = paddedNumber(time / (1000 * 60));\n    const seconds = paddedNumber((time / 1000) % 60);\n    const millis = paddedNumber(time % 100);\n\n    return <>{`${minutes}:${seconds}:${millis}`}</>;\n}\n","import React, { useReducer, useEffect } from 'react';\nimport { Time } from './Time';\n\nexport function UserRow({\n    userName,\n    timerStart,\n    totalTimer,\n    startTimer,\n    stopTimer,\n}: {\n    userName: string;\n    timerStart: number | null;\n    totalTimer: number;\n    startTimer: () => void;\n    stopTimer: () => void;\n}) {\n    const [, forceUpdate] = useReducer((x) => (x + 1) % 50, 0);\n\n    useEffect(() => {\n        if (timerStart) {\n            console.log('effect');\n            const interval = setInterval(() => forceUpdate(), 103);\n            return () => clearInterval(interval);\n        }\n    }, [timerStart]);\n\n    return (\n        <div className='row'>\n            <div className='userName'>{userName}</div>\n            <div className='timer'>\n                {timerStart ? (\n                    <Time time={totalTimer + (Date.now() - timerStart)} />\n                ) : (\n                    <Time time={totalTimer} />\n                )}\n            </div>\n            <div className='buttons'>\n                {timerStart ? (\n                    <button\n                        className='actionButton stopButton'\n                        onClick={() => {\n                            stopTimer();\n                        }}\n                    >\n                        Stop\n                    </button>\n                ) : (\n                    <button\n                        className='actionButton startButton'\n                        onClick={() => {\n                            startTimer();\n                        }}\n                    >\n                        Start\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { AddUserModal } from './AddUserModal';\n\nimport './App.css';\nimport { UserRow } from './UserRow';\nimport { useUsers } from './firebase';\n\nfunction App() {\n    const [userList, { startUserTimer, stopUserTimer }] = useUsers();\n    const [addUserShowing, setAddUserShowing] = useState(false);\n    return (\n        <div className='App'>\n            {addUserShowing && (\n                <AddUserModal closeModal={() => setAddUserShowing(false)} />\n            )}\n            {userList.map(({ name: userName, timeTotal, timerStart, id }) => (\n                <UserRow\n                    key={userName}\n                    userName={userName}\n                    timerStart={timerStart}\n                    totalTimer={timeTotal}\n                    startTimer={() => startUserTimer(id)}\n                    stopTimer={() => stopUserTimer(id)}\n                />\n            ))}\n            <button\n                className='addUserButton'\n                onClick={() => setAddUserShowing(true)}\n            >\n                Manage\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport Loader from 'react-loader-spinner';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Suspense\n        fallback={\n            <div className='loader'>\n                <Loader\n                    type='BallTriangle'\n                    color='#00BFFF'\n                    height={80}\n                    width={80}\n                />\n            </div>\n        }\n    >\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Suspense>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}